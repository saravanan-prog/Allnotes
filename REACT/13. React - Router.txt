REACT ROUTER
-------------

   - Router is defines to page navigation
   - React library does not have this.
   - we have to add additonal library "react-router-dom"

        npm i -D "react-router-dom"


React Router dom
----------------
    <BrowserRouter> =  We wrap our content first with
    <Routes>       =   An application can have multiple Route. so all route can wrap in single call Routes.
    <Route>        =     Routes can be nested. The first <Route> has a path of / and renders the Layout component.

            <BrowserRouter>
                <Routes>
                    <Route path="/" element={<Layout />}>
                    <Route index element={<Home />} />
                    <Route path="blogs" element={<Blogs />} />
                    <Route path="contact" element={<Contact />} />
                    <Route path="*" element={<NoPage />} />
                    </Route>
                </Routes>
            </BrowserRouter>


Route attribute
---------------
    path        =   defines navigation path name
    element     =   load the mentioned route page component 
    index       =   index is base executte first compoenent
    "/"         =   alias of index path execution
    "*"         =   This is called wild card route redirect to 404 error.


Link tag
---------
    <Link> is used to set the URL and keep track of browsing history.
     We will use <Link> instead of <a href="">.

        Examples
        ---------

            <Link to="/">Home</Link>
            <Link to="/blogs">Blogs</Link>
            <Link to="/contact">Contact</Link>

Navigate tag
------------
    <Navigate> = this tag is helps to redirect base component mentioned without page loading

     <Navigate to ="/login" />



Protection Routing
---------------------
    Some compoenents cannot access direct why because it is need authedication and authroization

    -Create one one base component name is authRoute



    function AuthRoute( {children} ) {

        const isAuth = localStorage.getItem('token') ? true : false

        if(!isAuth)
            return <Navigate to ="/login" />
        else
            return children
    }

            <BrowserRouter>

                <Routes>
                  
                    <Route path="dashboard" element={<AuthRoute >
                                                        <dashboard />
                                                    </AuthRoute>
                                                        } />

                    <Route path="cart-item" element={<AuthRoute >
                                                        <cartItem />
                                                    </AuthRoute>
                                                        } />
                    
                    </Route>
                </Routes>
             </BrowserRouter>


   
Router Hooks
-------------
    1. useParams() -> To get the route parametter values

                    <Route path="viewProfile/:id"           element={<ViewProfile />} />
                    <Route path="viewProfile/:id/:name"     element={<ViewProfile />} />

                function ViewProfile(){

                    const {id,name} = useParams()

                }






    2. useNavigate() -> This hook helps to navigate broswer route with page loading

              function ViewProfile(){

                   const navigate = useNavigate()

                   return <div>
                        <button onClick = {() => navigate('/login') }> Reidrect login </button>
                   </div>

                }


