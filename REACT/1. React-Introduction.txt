
1. REACT
----------

    -   React is a JavaScript library for building user interfaces.
    -   React is used to build single-page applications.
    -   React allows us to create reusable UI components.

     
    1.3 DOM
    ---------

        DOM stands for ‘Document Object Model’. In simple terms, 
        it is a structured representation of the HTML elements that are present in a webpage or web app. 
        DOM represents the entire UI of your application.
        It contains a node for each UI element present in the web document. 


    1.3 Virtual DOM 
    ----------------

        React's Virtual DOM (a lightweight in-memory representation of the real DOM) is a key feature that enables efficient and fast rendering of components.

        
    What is reconciliation?
    -------------------------

        Reconciliation is the process by which React compares the new Virtual DOM tree with the previous one to determine the minimum number of changes needed to update the actual DOM


    1.4 Babel
    ----------
       Babel is a JavaScript transpiler that converts modern JavaScript code (ES6+, JSX)
       into older syntax that can be executed by older browsers or environments.
       Why use Babel with React?

            1. JSX support: Babel allows you to use JSX syntax in your React components.
            2. ES6+ support: Babel transpiles modern JavaScript features (e.g., classes, arrow functions) into compatible code.
            3. Browser compatibility: Babel ensures your React application works in older browsers.

    1.5 webpack 
    -------------
    
        1. Module bundling: Webpack bundles React code and dependencies into a single file.
        2. Code optimization: Webpack optimizes code for production, reducing file size and improving performance.
        3. Loader support: Webpack's loader system allows for transpiling and processing code.

    
    1.1 Environment setup
    -------------------------


       Step 1   Install the node js software version v24. https://nodejs.org/dist/v24/
       Step 2   create one workspace in local c or D drive example: c:/development/react-project
       Step 3   open that folder command prompt.
       Step 4   npx create-react-app my-react-app
       Step 5   cd my-react-app
       Step 6   npm start
      

      React commands
      ----------------
          
        npm start       -  the development server.

        npm run build   -  Bundles the app into static files for production.

        npm test        - Starts the test runner.


    1.4 JSX
    -----------
        JSX stands for JavaScript XML.
        JSX allows us to write HTML in React.
        JSX makes it easier to write and add HTML in React.


        Example
        ----------

            function App(){

                return (
                    <div>
                        <p> Hello React JS </p>
                    </div>
                )
            }



    1.5 Data binding - One way binding - simple state
    ---------------------------------------------------


        Data binding is bind the data js to JSX elements. it known as string interpolation. ({})


        function App(){

            const welcomeMsg = "Hello React JS world"

            return (

                <div>
                    <p> { welcomeMsg } </p>
                </div>
            )

        }
    
    1.6 JSX tempalte Conditions 
    -----------------------------

            - simple if condition (&&)
            - Ternary Operator (ELSE condtions)


        1.6.1 Simple IF (&&)
        ---------------------

        function App(){

            const age = 18

            return (

                <div>
                    <h1> Voter List Program </h1>

                    { ( age >= 18 ) && (

                         <p> Voter is eligble</p>
                     ) }

                </div>
            )
        }

        1.6.1 Simple IF - Else (Ternary Opertor)
        ---------------------

        function App(){

            const age = 18

            return (

                <div>
                    <h1> Voter List Program </h1>

                    { ( age >= 18 ) ?
                    
                            <p> Candidate is Elgible </p>

                       :
                        
                        <p> Candidate is Not eligble </p>

                    }

                </div>
            )
        }


    1.7 JSX template looping
    ----------------------------

        Javascript map() methods is helps to itterate sequence of values in JSX elements.


        function FruitList(){

            const fruits = ["Apple","Mango","Orange","pineapple"]

            return (

                <div>
                    <ul>
                        {fruits &&
                            fruits.map((value,index)=> {
                                return <li key = {index}> {value} </li>
                            })}
                    </ul>
                </div>
            )
        }


        object - map
        ------------


        function EmployeeList() {

            const employee = [
                {
                name:'Sarath',
                desigination : 'Software Engineer'
                },
                {
                name:'vimal',
                desigination : 'Tester'
                },
                {
                name:'Sarath',
                desigination : 'Product Engineer'
                },
            ]


        return <div>
            <h1> TCS payroll system</h1>
            {employee &&
                employee.map((value,index)=>{
                const {name,desigination} = value
                return (
                    <React.Fragment key={index}>
                        <p> {name}</p>
                        <p > {desigination}</p>
                        <hr />
                    </React.Fragment>
                    
                )
                })
            }

        </div>

    }
















