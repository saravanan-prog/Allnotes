try and catch
==============
    The try and catch blocks in Java are used to handle exceptions, which are errors that occur during program execution.

    Basic Syntax
    ------------

        try {
            /* Code that may cause an exception */

        } catch (ExceptionType e) {
            /* Code to handle the exception */
        }


    How It Works
    --------------

        - The code inside the try block is executed.
        - If an exception occurs, the rest of the try block is skipped.
        - Java looks for a matching catch block.
        - If it finds one, it runs the code inside that catch block.

        -----------------------------------------------------------
        Keyword	        Purpose
        ------------------------------------------------------------
        try	            Code that might throw an exception goes here
        catch	        Handles the exception if it occurs


    General Exception Catch
    -----------------------
     You can also catch all exceptions using the base class Exception, but this should be used carefully.

        try {
            int a = 5 / 0;
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }

    
    Example 1 : Divide by Zero
    --------
        public class Example1 {
            public static void main(String[] args) {
                try {

                    int result = 10 / 0;  /* This causes ArithmeticException */
                    System.out.println("Result: " + result);

                } catch (ArithmeticException e) {
                    System.out.println("Cannot divide by zero!");
                }
            }
        }
    
    Example 2 : Array Index Out of Bounds
    ---------

        public class Example2 {
            public static void main(String[] args) {
                try {
                    int[] arr = {1, 2, 3};
                    System.out.println(arr[5]);  /* This causes ArrayIndexOutOfBoundsException */
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Array index is out of bounds!");
                }
            }
        }
    
    
   Multiple Catch Blocks
   ======================

     You can have multiple catch blocks to handle different types of exceptions

        try {

            String text = null;
            System.out.println(text.length());  /* NullPointerException */

        } 
        catch (ArithmeticException e) {   
            System.out.println("Arithmetic error");

        } 
        catch (NullPointerException e) {
            System.out.println("Null value error");
        }
        catch (ArrayIndexOutOfBoundsException e){
            System.out.println("Array IndexBound Exception");
        }
        

finally Block in Java â€” Explained Clearly
========================================

    The finally block in Java is always executed, whether an exception is thrown or not. It is used to write clean-up code like:

        Closing files
        Releasing memory
        Closing database connections
        Releasing locks

    Syntax
    ------

        try {
            /* Code that may cause an exception */
        } catch (ExceptionType e) {
            /* Code to handle exception */
        } finally {
            /* Code that always runs */
        }  

    Example
    --------
        public class FinallyExample1 {
            public static void main(String[] args) {
                try {

                    int a = 10 / 2;
                    System.out.println("Result: " + a);
                    
                } catch (ArithmeticException e) {
                    System.out.println("Caught an exception");
                } finally {
                    System.out.println("Finally block executed");
                }
            }
        }